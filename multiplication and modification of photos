import os
import cv2
import numpy as np
import random

def apply_grayscale(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

def apply_gaussian_noise(image, mean=0, sigma=25):
    if len(image.shape) == 2:
        row, col = image.shape
        gauss = np.random.normal(mean, sigma, (row, col))
        noisy = image + gauss
        noisy = np.clip(noisy, 0, 255).astype(np.uint8)
    else:
        row, col, ch = image.shape
        gauss = np.random.normal(mean, sigma, (row, col, ch))
        noisy = image + gauss
        noisy = np.clip(noisy, 0, 255).astype(np.uint8)

    return noisy

def apply_gaussian_filter(image, kernel_size=(3, 3), sigma=1):
    return cv2.GaussianBlur(image, kernel_size, sigma)

def apply_brightness(image, factor=0.1):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    hsv[..., 2] = np.clip(hsv[..., 2] * (1 + factor), 0, 255)
    return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)

def apply_contrast(image, factor=0.1):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.cvtColor(gray, cv2.COLOR_GRAY2BGR)
    return cv2.addWeighted(image, 1.0 + factor, gray, -factor, 0)

def apply_brightness_and_contrast(image, brightness_factor=0.1, contrast_factor=0.1):
    bright_image = apply_brightness(image, factor=brightness_factor)
    contrast_image = apply_contrast(bright_image, factor=contrast_factor)
    return contrast_image

def apply_augmentations(image, base_name, output_folder):
    augmented_images = []

    # Skala szarości
    for i in range(1, 3):
        grayscale_image = apply_grayscale(image)
        augmented_images.append(grayscale_image)
        save_path = os.path.join(output_folder, f"{base_name}_{i}.jpg")
        cv2.imwrite(save_path, grayscale_image)

    # Skala szarości z filtrem Gaussa
    for i in range(3, 6):
        grayscale_image = apply_grayscale(image)
        noisy_image = apply_gaussian_noise(grayscale_image)
        augmented_images.append(noisy_image)
        save_path = os.path.join(output_folder, f"{base_name}_{i}.jpg")
        cv2.imwrite(save_path, noisy_image)

    # Filtr Gaussa
    for i in range(6, 10):
        gaussian_image = apply_gaussian_filter(image)
        augmented_images.append(gaussian_image)
        save_path = os.path.join(output_folder, f"{base_name}_{i}.jpg")
        cv2.imwrite(save_path, gaussian_image)

    # Zmiana jasności
    for i in range(10, 13):
        bright_image = apply_brightness(image, factor=random.uniform(-0.3, 0.3))
        augmented_images.append(bright_image)
        save_path = os.path.join(output_folder, f"{base_name}_{i}.jpg")
        cv2.imwrite(save_path, bright_image)

    # Zmiana jasności i kontrastu
    for i in range(13, 17):
        bc_image = apply_brightness_and_contrast(image, brightness_factor=random.uniform(-0.1, 0.1), contrast_factor=random.uniform(-0.1, 0.1))
        augmented_images.append(bc_image)
        save_path = os.path.join(output_folder, f"{base_name}_{i}.jpg")
        cv2.imwrite(save_path, bc_image)

    # Zmiana kontrastu
    for i in range(17, 21):
        contrast_image = apply_contrast(image, factor=random.uniform(-0.3, 0.3))
        augmented_images.append(contrast_image)
        save_path = os.path.join(output_folder, f"{base_name}_{i}.jpg")
        cv2.imwrite(save_path, contrast_image)

    return augmented_images

def process_images(input_folder, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for filename in os.listdir(input_folder):
        if filename.endswith(".jpg") or filename.endswith(".png"):
            input_image_path = os.path.join(input_folder, filename)
            original_image = cv2.imread(input_image_path)
            base_name = os.path.splitext(filename)[0]

            augmented_images = apply_augmentations(original_image, base_name, output_folder)

if __name__ == "__main__":
    input_folder = r"C:\Users\mateu\Desktop\wykrywanie_rzeczy\dataset\images"
    output_folder = r"C:\Users\mateu\Desktop\wykrywanie_rzeczy\modyfikacja"
    process_images(input_folder, output_folder)
